library('classInt')   # Affecter ces couleurs aux données
library('Cairo')
library('sf')
library(rgeos)  # for gIntersection
library(raster)
dataset<- 'hlth_rs_prsrg'
df.data <- get_eurostat('hlth_rs_prsrg')
df.data <- df.data %>% filter(unit=='P_HTHAB')#%>% filter(str_length(geo)>2)
#dput(hlth_rs_prsrg,'hlth_rs_prsrg.put')
#hlth_rs_prsrg<- dget('hlth_rs_prsrg.put')
df.labels <-  (label_eurostat(df.data,lang='en',fix_duplicated = TRUE)) %>% dplyr::select(isco08,geo)
colnames(df.labels)<- c('profession','region')
df.data<- tibble::rowid_to_column(df.data, "ID")
df.labels<- tibble::rowid_to_column(df.labels, "ID")
df<- merge(df.data,df.labels,by='ID',all=TRUE)
dput(df,'hlth_rs_prsrg.dput')
df$year<- year(df$time)
dates_range <- unique(df$year)
professions <- unique(df$profession)
EU_NUTS <- readOGR(dsn = "./eurostats_data/NUTS_2010_60M_SH/data", layer = "NUTS_RG_60M_2010")
proj4string(EU_NUTS)
EU_NUTS <- spTransform(EU_NUTS, CRS("+init=epsg:2154"))
df.EU_NUTS <- data.frame(EU_NUTS@data)
EU.ISO <- unique(str_sub(df.EU_NUTS$NUTS_ID,1,2))
EU.ISO <- replace(EU.ISO, EU.ISO=="EL",'GR')
EU.ISO <- replace(EU.ISO, EU.ISO=="UK",'GB')
EU.ISO <- replace(EU.ISO, EU.ISO=="PT",'PR')
EU.ISO <- replace(EU.ISO, EU.ISO=="AT",'AU')
EU.ISO <- replace(EU.ISO, EU.ISO=="PL",'PO')
EU.ISO <- replace(EU.ISO, EU.ISO=="IE",'IR')
world.map <- readOGR(dsn="eurostats_data/ne_10m_admin_0_countries/", layer="ne_10m_admin_0_countries")
world.map <- world.map[((world.map$CONTINENT=='Europe')|(world.map$CONTINENT=='Africa')),]
world.map <- world.map[!(str_sub(world.map$BRK_A3,1,2) %in% EU.ISO),]
df.world<- data.frame(world.map@data)
#world.map <- gSimplify(world.map, tol = 0.00002)
world.map <- spTransform(world.map, CRS("+init=epsg:2154"))
ocean <- readOGR(dsn="eurostats_data/ne_50m_ocean/", layer="ne_50m_ocean")
ocean <- spTransform(ocean, CRS("+init=epsg:2154"))
date.range <- c(2014:2015)
df  %>% filter(grepl('UK',geo))%>% filter(year %in% date.range)  %>% filter(!is.na(values))
df.europe.year <- df %>% filter(profession=='Medical doctors') %>% filter(year %in% date.range)  %>% filter(!is.na(values))
df.europe.year <- df.europe.year[!duplicated(df.europe.year$geo),]
EU_NUTS_with_Data <- merge(EU_NUTS,df.europe.year,by.x='NUTS_ID',by.y='geo',all.x=TRUE, duplicateGeoms = TRUE)
EU_NUTS_with_Data <- EU_NUTS_with_Data[!is.na(EU_NUTS_with_Data$values),]
#EU_NUTS_with_Data <- subset(EU_NUTS_with_Data, ((grepl('DE',NUTS_ID)) & (STAT_LEVL_==1)) )
#EU_NUTS_with_Data <- EU_NUTS_with_Data[EU_NUTS_with_Data$STAT_LEVL_==2,]
df.shp.data.merged <- data.frame(EU_NUTS_with_Data@data)
col <- findColours(classIntervals(
EU_NUTS_with_Data$values, 100, style="quantile"),
smoothColors("red",98,"green"))
# Légende
leg <- findColours(classIntervals(
round(EU_NUTS_with_Data$values), 5, style="quantile"),
smoothColors("red",3,"green"),
under="<", over=">", between="–",
cutlabels=FALSE)
# define map limits
xlim = c(-828843  ,4287547)
ylim = c(5107843  ,9602614)
CP <- as(extent(c(xlim,ylim)), "SpatialPolygons")
proj4string(CP) <- proj4string(EU_NUTS_with_Data)
CP <- spTransform(CP, CRS("+init=epsg:2154"))
#png(file = "meuse.png", w = 1800, h = 1800, res = 300)
plot.new()
plot(CP)
EU_NUTS_with_Data <- crop(EU_NUTS_with_Data, extent(CP))
ocean.cropped <- gSimplify(ocean, tol = 0.00001)
# this is a well known R / GEOS hack (usually combined with the above) to
# deal with "bad" polygons
ocean.cropped <- gBuffer(ocean.cropped, byid=TRUE, width=0)
ocean.cropped <- crop(ocean.cropped, extent(CP))
world.map <- gBuffer(world.map, byid=TRUE, width=0)
world.map <- crop(world.map, extent(CP))
plot(EU_NUTS_with_Data,col=col,lwd=.1,add=TRUE)
plot(ocean.cropped,col='lightblue',lwd=0.1,add=TRUE)
plot(world.map,lwd=1,col='lightgrey',add=TRUE)
legend(2262890,9248213,fill=attr(leg, "palette"),
legend=names(attr(leg,"table")),
title = "Doctors per 100 000 Habitants :",cex = .5)
#dev.off()
col <- findColours(classIntervals(
EU_NUTS_with_Data$values, 100, style="quantile"),
smoothColors("red",98,"green"))
# Légende
leg <- findColours(classIntervals(
round(EU_NUTS_with_Data$values), 5, style="quantile"),
smoothColors("red",3,"green"),
under="<", over=">", between="–",
cutlabels=FALSE)
# define map limits
xlim = c(-828843  ,4287547)
ylim = c(5107843  ,9602614)
CP <- as(extent(c(xlim,ylim)), "SpatialPolygons")
proj4string(CP) <- proj4string(EU_NUTS_with_Data)
CP <- spTransform(CP, CRS("+init=epsg:2154"))
#png(file = "meuse.png", w = 1800, h = 1800, res = 300)
plot.new()
plot(CP)
EU_NUTS_with_Data <- crop(EU_NUTS_with_Data, extent(CP))
ocean.cropped <- gSimplify(ocean, tol = 0.00001)
# this is a well known R / GEOS hack (usually combined with the above) to
# deal with "bad" polygons
ocean.cropped <- gBuffer(ocean.cropped, byid=TRUE, width=0)
ocean.cropped <- crop(ocean.cropped, extent(CP))
world.map <- gBuffer(world.map, byid=TRUE, width=0)
world.map <- crop(world.map, extent(CP))
plot(EU_NUTS_with_Data,col=col,lwd=.1,add=TRUE)
plot(ocean.cropped,col='lightblue',lwd=0.1,add=TRUE)
plot(world.map,lwd=.1,col='lightgrey',add=TRUE)
legend(2262890,9248213,fill=attr(leg, "palette"),
legend=names(attr(leg,"table")),
title = "Doctors per 100 000 Habitants :",cex = .5)
#dev.off()
EU_NUTS <- readOGR(dsn = "./eurostats_data/NUTS_2010_60M_SH/data", layer = "NUTS_RG_60M_2010")
proj4string(EU_NUTS)
EU_NUTS <- spTransform(EU_NUTS, CRS("+init=epsg:2154"))
df.EU_NUTS <- data.frame(EU_NUTS@data)
EU.ISO <- unique(str_sub(df.EU_NUTS$NUTS_ID,1,2))
EU.ISO <- replace(EU.ISO, EU.ISO=="EL",'GR')
EU.ISO <- replace(EU.ISO, EU.ISO=="UK",'GB')
EU.ISO <- replace(EU.ISO, EU.ISO=="PT",'PR')
EU.ISO <- replace(EU.ISO, EU.ISO=="AT",'AU')
EU.ISO <- replace(EU.ISO, EU.ISO=="PL",'PO')
EU.ISO <- replace(EU.ISO, EU.ISO=="IE",'IR')
world.map <- readOGR(dsn="eurostats_data/ne_10m_admin_0_countries/", layer="ne_10m_admin_0_countries")
world.map <- world.map[((world.map$CONTINENT=='Europe')|(world.map$CONTINENT=='Africa')),]
world.map <- world.map[!(str_sub(world.map$BRK_A3,1,2) %in% EU.ISO),]
df.world<- data.frame(world.map@data)
#world.map <- gSimplify(world.map, tol = 0.00002)
world.map <- spTransform(world.map, CRS("+init=epsg:2154"))
ocean <- readOGR(dsn="eurostats_data/ne_50m_ocean/", layer="ne_50m_ocean")
ocean <- spTransform(ocean, CRS("+init=epsg:2154"))
date.range <- c(2000:2015)
df  %>% filter(grepl('UK',geo))%>% filter(year %in% date.range)  %>% filter(!is.na(values))
df.europe.year <- df %>% filter(profession=='Medical doctors') %>% filter(year %in% date.range)  %>% filter(!is.na(values))
df.europe.year <- df.europe.year[!duplicated(df.europe.year$geo),]
EU_NUTS_with_Data <- merge(EU_NUTS,df.europe.year,by.x='NUTS_ID',by.y='geo',all.x=TRUE, duplicateGeoms = TRUE)
EU_NUTS_with_Data <- EU_NUTS_with_Data[!is.na(EU_NUTS_with_Data$values),]
#EU_NUTS_with_Data <- subset(EU_NUTS_with_Data, ((grepl('DE',NUTS_ID)) & (STAT_LEVL_==1)) )
#EU_NUTS_with_Data <- EU_NUTS_with_Data[EU_NUTS_with_Data$STAT_LEVL_==2,]
df.shp.data.merged <- data.frame(EU_NUTS_with_Data@data)
col <- findColours(classIntervals(
EU_NUTS_with_Data$values, 100, style="quantile"),
smoothColors("red",98,"green"))
# Légende
leg <- findColours(classIntervals(
round(EU_NUTS_with_Data$values), 5, style="quantile"),
smoothColors("red",3,"green"),
under="<", over=">", between="–",
cutlabels=FALSE)
# define map limits
xlim = c(-828843  ,4287547)
ylim = c(5107843  ,9602614)
CP <- as(extent(c(xlim,ylim)), "SpatialPolygons")
proj4string(CP) <- proj4string(EU_NUTS_with_Data)
CP <- spTransform(CP, CRS("+init=epsg:2154"))
#png(file = "meuse.png", w = 1800, h = 1800, res = 300)
plot.new()
plot(CP)
EU_NUTS_with_Data <- crop(EU_NUTS_with_Data, extent(CP))
ocean.cropped <- gSimplify(ocean, tol = 0.00001)
# this is a well known R / GEOS hack (usually combined with the above) to
# deal with "bad" polygons
ocean.cropped <- gBuffer(ocean.cropped, byid=TRUE, width=0)
ocean.cropped <- crop(ocean.cropped, extent(CP))
world.map <- gBuffer(world.map, byid=TRUE, width=0)
world.map <- crop(world.map, extent(CP))
plot(EU_NUTS_with_Data,col=col,lwd=.1,add=TRUE)
plot(ocean.cropped,col='lightblue',lwd=0.1,add=TRUE)
plot(world.map,lwd=.1,col='lightgrey',add=TRUE)
legend(2262890,9248213,fill=attr(leg, "palette"),
legend=names(attr(leg,"table")),
title = "Doctors per 100 000 Habitants :",cex = .5)
#dev.off()
unique(df.data$geo)
EU_NUTS <- readOGR(dsn = "./eurostats_data/NUTS_2010_60M_SH/data", layer = "NUTS_RG_60M_2010")
proj4string(EU_NUTS)
EU_NUTS <- spTransform(EU_NUTS, CRS("+init=epsg:2154"))
df.EU_NUTS <- data.frame(EU_NUTS@data)
EU.ISO <- unique(str_sub(df.EU_NUTS$NUTS_ID,1,2))
EU.ISO <- replace(EU.ISO, EU.ISO=="EL",'GR')
EU.ISO <- replace(EU.ISO, EU.ISO=="UK",'GB')
EU.ISO <- replace(EU.ISO, EU.ISO=="PT",'PR')
EU.ISO <- replace(EU.ISO, EU.ISO=="AT",'AU')
EU.ISO <- replace(EU.ISO, EU.ISO=="PL",'PO')
EU.ISO <- replace(EU.ISO, EU.ISO=="IE",'IR')
EU.ISO <- replace(EU.ISO, EU.ISO=="DK",'DN')
world.map <- readOGR(dsn="eurostats_data/ne_10m_admin_0_countries/", layer="ne_10m_admin_0_countries")
world.map <- world.map[((world.map$CONTINENT=='Europe')|(world.map$CONTINENT=='Africa')),]
world.map <- world.map[!(str_sub(world.map$BRK_A3,1,2) %in% EU.ISO),]
df.world<- data.frame(world.map@data)
#world.map <- gSimplify(world.map, tol = 0.00002)
world.map <- spTransform(world.map, CRS("+init=epsg:2154"))
ocean <- readOGR(dsn="eurostats_data/ne_50m_ocean/", layer="ne_50m_ocean")
ocean <- spTransform(ocean, CRS("+init=epsg:2154"))
date.range <- c(2000:2015)
df  %>% filter(grepl('UK',geo))%>% filter(year %in% date.range)  %>% filter(!is.na(values))
df.europe.year <- df %>% filter(profession=='Medical doctors') %>% filter(year %in% date.range)  %>% filter(!is.na(values))
df.europe.year <- df.europe.year[!duplicated(df.europe.year$geo),]
EU_NUTS_with_Data <- merge(EU_NUTS,df.europe.year,by.x='NUTS_ID',by.y='geo',all.x=TRUE, duplicateGeoms = TRUE)
EU_NUTS_with_Data <- EU_NUTS_with_Data[!is.na(EU_NUTS_with_Data$values),]
#EU_NUTS_with_Data <- subset(EU_NUTS_with_Data, ((grepl('DE',NUTS_ID)) & (STAT_LEVL_==1)) )
#EU_NUTS_with_Data <- EU_NUTS_with_Data[EU_NUTS_with_Data$STAT_LEVL_==2,]
df.shp.data.merged <- data.frame(EU_NUTS_with_Data@data)
col <- findColours(classIntervals(
EU_NUTS_with_Data$values, 100, style="quantile"),
smoothColors("red",98,"green"))
# Légende
leg <- findColours(classIntervals(
round(EU_NUTS_with_Data$values), 5, style="quantile"),
smoothColors("red",3,"green"),
under="<", over=">", between="–",
cutlabels=FALSE)
# define map limits
xlim = c(-828843  ,4287547)
ylim = c(5107843  ,9602614)
CP <- as(extent(c(xlim,ylim)), "SpatialPolygons")
proj4string(CP) <- proj4string(EU_NUTS_with_Data)
CP <- spTransform(CP, CRS("+init=epsg:2154"))
#png(file = "meuse.png", w = 1800, h = 1800, res = 300)
plot.new()
plot(CP)
EU_NUTS_with_Data <- crop(EU_NUTS_with_Data, extent(CP))
ocean.cropped <- gSimplify(ocean, tol = 0.00001)
# this is a well known R / GEOS hack (usually combined with the above) to
# deal with "bad" polygons
ocean.cropped <- gBuffer(ocean.cropped, byid=TRUE, width=0)
ocean.cropped <- crop(ocean.cropped, extent(CP))
world.map <- gBuffer(world.map, byid=TRUE, width=0)
world.map <- crop(world.map, extent(CP))
plot(EU_NUTS_with_Data,col=col,lwd=.1,add=TRUE)
plot(ocean.cropped,col='lightblue',lwd=0.1,add=TRUE)
plot(world.map,lwd=.1,col='lightgrey',add=TRUE)
legend(2262890,9248213,fill=attr(leg, "palette"),
legend=names(attr(leg,"table")),
title = "Doctors per 100 000 Habitants :",cex = .5)
#dev.off()
unique(df.data$geo)
EU_NUTS <- readOGR(dsn = "./eurostats_data/NUTS_2010_60M_SH/data", layer = "NUTS_RG_60M_2010")
proj4string(EU_NUTS)
EU_NUTS <- spTransform(EU_NUTS, CRS("+init=epsg:2154"))
df.EU_NUTS <- data.frame(EU_NUTS@data)
EU.ISO <- unique(str_sub(df.EU_NUTS$NUTS_ID,1,2))
EU.ISO <- replace(EU.ISO, EU.ISO=="EL",'GR')
EU.ISO <- replace(EU.ISO, EU.ISO=="UK",'GB')
EU.ISO <- replace(EU.ISO, EU.ISO=="PT",'PR')
EU.ISO <- replace(EU.ISO, EU.ISO=="AT",'AU')
EU.ISO <- replace(EU.ISO, EU.ISO=="PL",'PO')
EU.ISO <- replace(EU.ISO, EU.ISO=="IE",'IR')
EU.ISO <- replace(EU.ISO, EU.ISO=="DK",'DN')
EU.ISO <- replace(EU.ISO, EU.ISO=="SE",'SW')
world.map <- readOGR(dsn="eurostats_data/ne_10m_admin_0_countries/", layer="ne_10m_admin_0_countries")
world.map <- world.map[((world.map$CONTINENT=='Europe')|(world.map$CONTINENT=='Africa')),]
world.map <- world.map[!(str_sub(world.map$BRK_A3,1,2) %in% EU.ISO),]
df.world<- data.frame(world.map@data)
#world.map <- gSimplify(world.map, tol = 0.00002)
world.map <- spTransform(world.map, CRS("+init=epsg:2154"))
ocean <- readOGR(dsn="eurostats_data/ne_50m_ocean/", layer="ne_50m_ocean")
ocean <- spTransform(ocean, CRS("+init=epsg:2154"))
date.range <- c(2000:2015)
df  %>% filter(grepl('UK',geo))%>% filter(year %in% date.range)  %>% filter(!is.na(values))
df.europe.year <- df %>% filter(profession=='Medical doctors') %>% filter(year %in% date.range)  %>% filter(!is.na(values))
df.europe.year <- df.europe.year[!duplicated(df.europe.year$geo),]
EU_NUTS_with_Data <- merge(EU_NUTS,df.europe.year,by.x='NUTS_ID',by.y='geo',all.x=TRUE, duplicateGeoms = TRUE)
EU_NUTS_with_Data <- EU_NUTS_with_Data[!is.na(EU_NUTS_with_Data$values),]
#EU_NUTS_with_Data <- subset(EU_NUTS_with_Data, ((grepl('DE',NUTS_ID)) & (STAT_LEVL_==1)) )
#EU_NUTS_with_Data <- EU_NUTS_with_Data[EU_NUTS_with_Data$STAT_LEVL_==2,]
df.shp.data.merged <- data.frame(EU_NUTS_with_Data@data)
col <- findColours(classIntervals(
EU_NUTS_with_Data$values, 100, style="quantile"),
smoothColors("red",98,"green"))
# Légende
leg <- findColours(classIntervals(
round(EU_NUTS_with_Data$values), 5, style="quantile"),
smoothColors("red",3,"green"),
under="<", over=">", between="–",
cutlabels=FALSE)
# define map limits
xlim = c(-828843  ,4287547)
ylim = c(5107843  ,9602614)
CP <- as(extent(c(xlim,ylim)), "SpatialPolygons")
proj4string(CP) <- proj4string(EU_NUTS_with_Data)
CP <- spTransform(CP, CRS("+init=epsg:2154"))
#png(file = "meuse.png", w = 1800, h = 1800, res = 300)
plot.new()
plot(CP)
EU_NUTS_with_Data <- crop(EU_NUTS_with_Data, extent(CP))
ocean.cropped <- gSimplify(ocean, tol = 0.00001)
# this is a well known R / GEOS hack (usually combined with the above) to
# deal with "bad" polygons
ocean.cropped <- gBuffer(ocean.cropped, byid=TRUE, width=0)
ocean.cropped <- crop(ocean.cropped, extent(CP))
world.map <- gBuffer(world.map, byid=TRUE, width=0)
world.map <- crop(world.map, extent(CP))
plot(EU_NUTS_with_Data,col=col,lwd=.1,add=TRUE)
plot(ocean.cropped,col='lightblue',lwd=0.1,add=TRUE)
plot(world.map,lwd=.1,col='lightgrey',add=TRUE)
legend(2262890,9248213,fill=attr(leg, "palette"),
legend=names(attr(leg,"table")),
title = "Doctors per 100 000 Habitants :",cex = .5)
#dev.off()
EU_NUTS <- readOGR(dsn = "./eurostats_data/NUTS_2010_60M_SH/data", layer = "NUTS_RG_60M_2010")
EU_NUTS <- readOGR(dsn = "./eurostats_data/NUTS_2010_60M_SH/data", layer = "NUTS_RG_60M_2010")
EU_NUTS <- readOGR(dsn = "./eurostats_data/NUTS_2010_60M_SH/data", layer = "NUTS_RG_60M_2010")
library(tidyverse)
library(ggplot2)
library(eurostat)
library(lubridate)
library(gridExtra)
library(stringr)
library('rgdal')      # Lire et reprojeter les cartes
library('plotrix')    # Créer des échelles de couleurs
library('classInt')   # Affecter ces couleurs aux données
library('Cairo')
library('sf')
library(rgeos)  # for gIntersection
library(raster)
dataset<- 'hlth_rs_prsrg'
df.data <- get_eurostat('hlth_rs_prsrg')
df.data <- df.data %>% filter(unit=='P_HTHAB')#%>% filter(str_length(geo)>2)
#dput(hlth_rs_prsrg,'hlth_rs_prsrg.put')
#hlth_rs_prsrg<- dget('hlth_rs_prsrg.put')
df.labels <-  (label_eurostat(df.data,lang='en',fix_duplicated = TRUE)) %>% dplyr::select(isco08,geo)
colnames(df.labels)<- c('profession','region')
df.data<- tibble::rowid_to_column(df.data, "ID")
df.labels<- tibble::rowid_to_column(df.labels, "ID")
df<- merge(df.data,df.labels,by='ID',all=TRUE)
dput(df,'hlth_rs_prsrg.dput')
df$year<- year(df$time)
dates_range <- unique(df$year)
professions <- unique(df$profession)
EU_NUTS <- readOGR(dsn = "./eurostats_data/NUTS_2010_60M_SH/data", layer = "NUTS_RG_60M_2010")
proj4string(EU_NUTS)
EU_NUTS <- spTransform(EU_NUTS, CRS("+init=epsg:2154"))
df.EU_NUTS <- data.frame(EU_NUTS@data)
EU.ISO <- unique(str_sub(df.EU_NUTS$NUTS_ID,1,2))
EU.ISO <- replace(EU.ISO, EU.ISO=="EL",'GR')
EU.ISO <- replace(EU.ISO, EU.ISO=="UK",'GB')
EU.ISO <- replace(EU.ISO, EU.ISO=="PT",'PR')
EU.ISO <- replace(EU.ISO, EU.ISO=="AT",'AU')
EU.ISO <- replace(EU.ISO, EU.ISO=="PL",'PO')
EU.ISO <- replace(EU.ISO, EU.ISO=="IE",'IR')
EU.ISO <- replace(EU.ISO, EU.ISO=="DK",'DN')
EU.ISO <- replace(EU.ISO, EU.ISO=="SE",'SW')
world.map <- readOGR(dsn="eurostats_data/ne_10m_ad.min_0_countries/", layer="ne_10m_admin_0_countries")
EU_NUTS <- readOGR(dsn = "./eurostats_data/NUTS_2010_60M_SH/data", layer = "NUTS_RG_60M_2010")
proj4string(EU_NUTS)
EU_NUTS <- spTransform(EU_NUTS, CRS("+init=epsg:2154"))
df.EU_NUTS <- data.frame(EU_NUTS@data)
EU.ISO <- unique(str_sub(df.EU_NUTS$NUTS_ID,1,2))
EU.ISO <- replace(EU.ISO, EU.ISO=="EL",'GR')
EU.ISO <- replace(EU.ISO, EU.ISO=="UK",'GB')
EU.ISO <- replace(EU.ISO, EU.ISO=="PT",'PR')
EU.ISO <- replace(EU.ISO, EU.ISO=="AT",'AU')
EU.ISO <- replace(EU.ISO, EU.ISO=="PL",'PO')
EU.ISO <- replace(EU.ISO, EU.ISO=="IE",'IR')
EU.ISO <- replace(EU.ISO, EU.ISO=="DK",'DN')
EU.ISO <- replace(EU.ISO, EU.ISO=="SE",'SW')
world.map <- readOGR(dsn="eurostats_data/ne_10m_ad.min_0_countries/", layer="ne_10m_admin_0_countries")
EU_NUTS <- readOGR(dsn = "./eurostats_data/NUTS_2010_60M_SH/data", layer = "NUTS_RG_60M_2010")
proj4string(EU_NUTS)
EU_NUTS <- spTransform(EU_NUTS, CRS("+init=epsg:2154"))
df.EU_NUTS <- data.frame(EU_NUTS@data)
EU.ISO <- unique(str_sub(df.EU_NUTS$NUTS_ID,1,2))
EU.ISO <- replace(EU.ISO, EU.ISO=="EL",'GR')
EU.ISO <- replace(EU.ISO, EU.ISO=="UK",'GB')
EU.ISO <- replace(EU.ISO, EU.ISO=="PT",'PR')
EU.ISO <- replace(EU.ISO, EU.ISO=="AT",'AU')
EU.ISO <- replace(EU.ISO, EU.ISO=="PL",'PO')
EU.ISO <- replace(EU.ISO, EU.ISO=="IE",'IR')
EU.ISO <- replace(EU.ISO, EU.ISO=="DK",'DN')
EU.ISO <- replace(EU.ISO, EU.ISO=="SE",'SW')
world.map <- readOGR(dsn="eurostats_data/ne_10m_ad.min_0_countries/",layer="ne_10m_admin_0_countries")
EU_NUTS <- readOGR(dsn = "./eurostats_data/NUTS_2010_60M_SH/data", layer = "NUTS_RG_60M_2010")
proj4string(EU_NUTS)
EU_NUTS <- spTransform(EU_NUTS, CRS("+init=epsg:2154"))
df.EU_NUTS <- data.frame(EU_NUTS@data)
EU.ISO <- unique(str_sub(df.EU_NUTS$NUTS_ID,1,2))
EU.ISO <- replace(EU.ISO, EU.ISO=="EL",'GR')
EU.ISO <- replace(EU.ISO, EU.ISO=="UK",'GB')
EU.ISO <- replace(EU.ISO, EU.ISO=="PT",'PR')
EU.ISO <- replace(EU.ISO, EU.ISO=="AT",'AU')
EU.ISO <- replace(EU.ISO, EU.ISO=="PL",'PO')
EU.ISO <- replace(EU.ISO, EU.ISO=="IE",'IR')
EU.ISO <- replace(EU.ISO, EU.ISO=="DK",'DN')
EU.ISO <- replace(EU.ISO, EU.ISO=="SE",'SW')
world.map <- readOGR(dsn="eurostats_data/ne_10m_admin_0_countries/",layer="ne_10m_admin_0_countries")
world.map <- world.map[((world.map$CONTINENT %in% c('Europe','Africa','Asia'),]
EU_NUTS <- readOGR(dsn = "./eurostats_data/NUTS_2010_60M_SH/data", layer = "NUTS_RG_60M_2010")
proj4string(EU_NUTS)
EU_NUTS <- spTransform(EU_NUTS, CRS("+init=epsg:2154"))
df.EU_NUTS <- data.frame(EU_NUTS@data)
EU.ISO <- unique(str_sub(df.EU_NUTS$NUTS_ID,1,2))
EU.ISO <- replace(EU.ISO, EU.ISO=="EL",'GR')
EU.ISO <- replace(EU.ISO, EU.ISO=="UK",'GB')
EU.ISO <- replace(EU.ISO, EU.ISO=="PT",'PR')
EU.ISO <- replace(EU.ISO, EU.ISO=="AT",'AU')
EU.ISO <- replace(EU.ISO, EU.ISO=="PL",'PO')
EU.ISO <- replace(EU.ISO, EU.ISO=="IE",'IR')
EU.ISO <- replace(EU.ISO, EU.ISO=="DK",'DN')
EU.ISO <- replace(EU.ISO, EU.ISO=="SE",'SW')
world.map <- readOGR(dsn="eurostats_data/ne_10m_admin_0_countries/",layer="ne_10m_admin_0_countries")
world.map <- world.map[world.map$CONTINENT %in% c('Europe','Africa','Asia'),]
world.map <- world.map[!(str_sub(world.map$BRK_A3,1,2) %in% EU.ISO),]
df.world<- data.frame(world.map@data)
#world.map <- gSimplify(world.map, tol = 0.00002)
world.map <- spTransform(world.map, CRS("+init=epsg:2154"))
ocean <- readOGR(dsn="eurostats_data/ne_50m_ocean/", layer="ne_50m_ocean")
ocean <- spTransform(ocean, CRS("+init=epsg:2154"))
date.range <- c(2000:2015)
df  %>% filter(grepl('UK',geo))%>% filter(year %in% date.range)  %>% filter(!is.na(values))
df.europe.year <- df %>% filter(profession=='Medical doctors') %>% filter(year %in% date.range)  %>% filter(!is.na(values))
df.europe.year <- df.europe.year[!duplicated(df.europe.year$geo),]
EU_NUTS_with_Data <- merge(EU_NUTS,df.europe.year,by.x='NUTS_ID',by.y='geo',all.x=TRUE, duplicateGeoms = TRUE)
EU_NUTS_with_Data <- EU_NUTS_with_Data[!is.na(EU_NUTS_with_Data$values),]
#EU_NUTS_with_Data <- subset(EU_NUTS_with_Data, ((grepl('DE',NUTS_ID)) & (STAT_LEVL_==1)) )
#EU_NUTS_with_Data <- EU_NUTS_with_Data[EU_NUTS_with_Data$STAT_LEVL_==2,]
df.shp.data.merged <- data.frame(EU_NUTS_with_Data@data)
col <- findColours(classIntervals(
EU_NUTS_with_Data$values, 100, style="quantile"),
smoothColors("red",98,"green"))
# Légende
leg <- findColours(classIntervals(
round(EU_NUTS_with_Data$values), 5, style="quantile"),
smoothColors("red",3,"green"),
under="<", over=">", between="–",
cutlabels=FALSE)
# define map limits
xlim = c(-828843  ,4287547)
ylim = c(5107843  ,9602614)
CP <- as(extent(c(xlim,ylim)), "SpatialPolygons")
proj4string(CP) <- proj4string(EU_NUTS_with_Data)
CP <- spTransform(CP, CRS("+init=epsg:2154"))
#png(file = "meuse.png", w = 1800, h = 1800, res = 300)
plot.new()
plot(CP)
EU_NUTS_with_Data <- crop(EU_NUTS_with_Data, extent(CP))
ocean.cropped <- gSimplify(ocean, tol = 0.00001)
# this is a well known R / GEOS hack (usually combined with the above) to
# deal with "bad" polygons
ocean.cropped <- gBuffer(ocean.cropped, byid=TRUE, width=0)
ocean.cropped <- crop(ocean.cropped, extent(CP))
world.map <- gBuffer(world.map, byid=TRUE, width=0)
world.map <- crop(world.map, extent(CP))
plot(EU_NUTS_with_Data,col=col,lwd=.1,add=TRUE)
plot(ocean.cropped,col='lightblue',lwd=0.1,add=TRUE)
plot(world.map,lwd=.1,col='lightgrey',add=TRUE)
legend(2262890,9248213,fill=attr(leg, "palette"),
legend=names(attr(leg,"table")),
title = "Doctors per 100 000 Habitants :",cex = .5)
#dev.off()
View(df.EU_NUTS)
plot(world.map,col='blue')
View(df.world)
View(df.world)
View(df.world)
View(df.world)
EU.ISO
plot(world.map[world.map$SOVEREIGNT=="Israel",])
plot(world.map[world.map$SOVEREIGNT=="Kosovo",])
plot(world.map,lwd=.1,col='lightgrey')#,add=TRUE)
plot(world.map,lwd=.1,col='lightgrey')#,add=TRUE)
col <- findColours(classIntervals(
EU_NUTS_with_Data$values, 100, style="quantile"),
smoothColors("red",98,"green"))
# Légende
leg <- findColours(classIntervals(
round(EU_NUTS_with_Data$values), 5, style="quantile"),
smoothColors("red",3,"green"),
under="<", over=">", between="–",
cutlabels=FALSE)
# define map limits
xlim = c(-828843  ,4287547)
ylim = c(5107843  ,9602614)
CP <- as(extent(c(xlim,ylim)), "SpatialPolygons")
proj4string(CP) <- proj4string(EU_NUTS_with_Data)
CP <- spTransform(CP, CRS("+init=epsg:2154"))
#png(file = "meuse.png", w = 1800, h = 1800, res = 300)
plot.new()
plot(CP)
EU_NUTS_with_Data <- crop(EU_NUTS_with_Data, extent(CP))
ocean.cropped <- gSimplify(ocean, tol = 0.00001)
# this is a well known R / GEOS hack (usually combined with the above) to
# deal with "bad" polygons
ocean.cropped <- gBuffer(ocean.cropped, byid=TRUE, width=0)
ocean.cropped <- crop(ocean.cropped, extent(CP))
world.map <- gBuffer(world.map, byid=TRUE, width=0)
world.map <- crop(world.map, extent(CP))
plot(EU_NUTS_with_Data,col=col,lwd=.1,add=TRUE)
plot(ocean.cropped,col='lightblue',lwd=0.1,add=TRUE)
plot(world.map,lwd=.1,col='lightgrey',add=TRUE)
legend(2262890,9248213,fill=attr(leg, "palette"),
legend=names(attr(leg,"table")),
title = "Doctors per 100 000 Habitants :",cex = .5)
#dev.off()
library(shiny)
app<- shinyApp(ui,server)
%cd ..
% cd ..
runApp('workspace/sun_is_shiny')
runApp(app)
runApp('app.R')
getwd()
runApp('workspace/sun_is_shiny/app.R')
setwd('workspace/sun_is_shiny')
getwd()
runApp('app.R')
mv server.r server.R
mv server.r server.R
runApp('app.R')
app
quit()
